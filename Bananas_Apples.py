# -*- coding: utf-8 -*-
"""Copy of quickstart.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CKf3M4DXa-9yns1RqGC6bNUk1EnfU_sZ

<!-- Autogenerated by `scripts/make_examples.py` -->
<table align="left">
    <td>
        <a target="_blank" href="https://colab.research.google.com/github/voxel51/fiftyone-examples/blob/master/examples/quickstart.ipynb">
            <img src="https://user-images.githubusercontent.com/25985824/104791629-6e618700-5769-11eb-857f-d176b37d2496.png" height="32" width="32">
            Try in Google Colab
        </a>
    </td>
    <td>
        <a target="_blank" href="https://nbviewer.jupyter.org/github/voxel51/fiftyone-examples/blob/master/examples/quickstart.ipynb">
            <img src="https://user-images.githubusercontent.com/25985824/104791634-6efa1d80-5769-11eb-8a4c-71d6cb53ccf0.png" height="32" width="32">
            Share via nbviewer
        </a>
    </td>
    <td>
        <a target="_blank" href="https://github.com/voxel51/fiftyone-examples/blob/master/examples/quickstart.ipynb">
            <img src="https://user-images.githubusercontent.com/25985824/104791633-6efa1d80-5769-11eb-8ee3-4b2123fe4b66.png" height="32" width="32">
            View on GitHub
        </a>
    </td>
    <td>
        <a href="https://github.com/voxel51/fiftyone-examples/raw/master/examples/quickstart.ipynb" download>
            <img src="https://user-images.githubusercontent.com/25985824/104792428-60f9cc00-576c-11eb-95a4-5709d803023a.png" height="32" width="32">
            Download notebook
        </a>
    </td>
</table>

## Install FiftyOne
"""

!pip install fiftyone

"""## Load a dataset

Let's get started by importing the FiftyOne library:
"""

from google.colab import files
uploaded = files.upload()

"""FiftyOne provides a number of helpful data/model resources to get you up and running on your projects. In this example, we'll load a small detection dataset from the [FiftyOne Dataset Zoo](https://voxel51.com/docs/fiftyone/user_guide/dataset_zoo/index.html).

The command below downloads the dataset from the web and loads it into a [FiftyOne Dataset](https://voxel51.com/docs/fiftyone/user_guide/basics.html) that we'll use to explore the capabilities of FiftyOne:
"""

import py7zr
import os

# Define paths
seven_z_file = "/content/images.7z"  # Update with your file name
extract_path = "/content"

# Extract the .7z file
with py7zr.SevenZipFile(seven_z_file, mode='r') as archive:
    archive.extractall(path=extract_path)

print("Files extracted to:", extract_path)

import fiftyone as fo
import fiftyone.zoo as foz

# Step 1: Load your custom image dataset
dataset = fo.Dataset.from_images_dir("/content/images")  # Replace with your dataset path

# Step 2: Load the pre-trained AlexNet model
model = foz.load_zoo_model("clip-vit-base32-torch")

# Step 3: Apply the model to your dataset (store predictions in 'predictions' field)
dataset.apply_model(model, label_field="predictions")

# Step 4: Launch the app to view the dataset and predictions
session = fo.launch_app(dataset)

model = foz.load_zoo_model(
    "clip-vit-base32-torch",
    text_prompt="A photo of a",
    classes=["banana", "ripe apple", "brown banana", "old apple", "wrinkly apple", "brown apple"],
)

dataset.apply_model(model, label_field="predictions")
session.refresh()

"""Now let's launch the [FiftyOne App](https://voxel51.com/docs/fiftyone/user_guide/app.html) so we can explore the dataset visually. Right away you will see that because we are in a notebook, an embedded instance of the App with our dataset loaded has been rendered in the cell's output.

The [Session](https://voxel51.com/docs/fiftyone/api/fiftyone.core.session.html#fiftyone.core.session.Session) object created below is a bi-directional connection between your Python kernel and the FiftyOne App, as we'll see later.
"""

session = fo.launch_app(dataset)

"""## Automatic screenshots as you work

Notebooks are great for many reasons, one of which is the ability to share your work with others. FiftyOne is designed to help you write notebooks that capture your work on visual datasets, using a feature we call **automatic screenshotting**.

Whenever you open a new App instance in a notebook cell, e.g., by updating your [Session](https://voxel51.com/docs/fiftyone/api/fiftyone.core.session.html#fiftyone.core.session.Session) object, any previous App instances will be automatically replaced with a static screenshot. In fact, that's what you're seeing below; screenshots of the Apps we opened when we created this notebook!

The cell below issues a [session.show()](https://voxel51.com/docs/fiftyone/api/fiftyone.core.session.html#fiftyone.core.session.Session.show) command, which opens a new App instance in the cell's output. When you run the cell for yourself, notice that the App instance in the previous cell is automatically replaced with a screenshot of its current state. You can reactivate old App instances by hovering over them and clicking anywhere.

After running the cell below, try double-clicking on an image in the grid to expand the sample.
"""

session.show()

"""## Dataset Views

The power of FiftyOne truly comes alive when using [dataset views](https://voxel51.com/docs/fiftyone/user_guide/using_views.html).

Think of a [Dataset](https://voxel51.com/docs/fiftyone/api/fiftyone.core.dataset.html#fiftyone.core.dataset.Dataset) as the root view into your all of your data. Creating a [DatasetView](https://voxel51.com/docs/fiftyone/api/fiftyone.core.view.html#fiftyone.core.view.DatasetView) allows you to study a specific subset of the samples and/or fields of your dataset.

Dataset views can be created and modified both in Python and in the App. The active view in the App is always available via the [Session.view](https://voxel51.com/docs/fiftyone/api/fiftyone.core.session.html#fiftyone.core.session.Session.view) property of your session. This means that if you update your view in the App, its state will be captured by [Session.view](https://voxel51.com/docs/fiftyone/api/fiftyone.core.session.html#fiftyone.core.session.Session.view). Or, you can create a view programmatically in Python and open it in the App by setting the [Session.view](https://voxel51.com/docs/fiftyone/api/fiftyone.core.session.html#fiftyone.core.session.Session.view) property.

Let's start by creating a view into our dataset via the App. We'll sort the dataset by the `uniqueness` field to show the most unique images first. To do this, we will click `+ add stage` in the View Bar and add a `SortBy` stage with `uniqueness` as the field, and `reverse` equal to `True`.
"""

session.show()

"""We can then access the view in Python and, for example, print the most unique sample:"""

print(session.dataset.first())

"""## Complex views in Python

Sometimes you may be interested in creating a [complex view](https://voxel51.com/docs/fiftyone/user_guide/using_views.html#view-stages) into a dataset that is specified by a series of conditions or complex filtering operations.

You can achieve this in FiftyOne by [chaining view stages](https://voxel51.com/docs/fiftyone/user_guide/using_views.html#tips-tricks) together to define the view you want.

As an example, let's create a view that contains only the 25 most unique samples in the dataset, and only predictions on those samples with confidence > 0.5.

Remember that, because we are working in a notebook, any time we change our [Session](https://voxel51.com/docs/fiftyone/api/fiftyone.core.session.html#fiftyone.core.session.Session) object, a new App will be displayed in the cell's output.
"""

from fiftyone import ViewField as F

session.view = (
    dataset
    .sort_by("uniqueness", reverse=True)
    .limit(25)
    .filter_labels("predictions", F("confidence") > 0.5)
)

"""## Debugging your model

A primary use case of FiftyOne is being able to easily visualize and explore your model predictions to find failure cases that need to be addressed to improve performance.

The `quickstart` dataset already has predictions in its `predictions` field, but you can easily [add your own model predictions](https://voxel51.com/docs/fiftyone/recipes/model_inference.html) to datasets for a variety of tasks including [classification, detection, segmentation, keypoints, and more](https://voxel51.com/docs/fiftyone/user_guide/using_datasets.html#labels). Or, if you don't have your own model, you can check out the [FiftyOne Model Zoo](https://voxel51.com/docs/fiftyone/user_guide/model_zoo/index.html#fiftyone-model-zoo) to download a pre-trained model and generate predictions on your data with just a couple lines of code.

Once you have predictions on your dataset, you can use FiftyOne's powerful [evaluation framework](https://voxel51.com/docs/fiftyone/user_guide/evaluation.html) to evaluate it. For example, let's compute the COCO-style mean average precision (mAP) of our predictions using the builtin [evaluate_detections()](https://voxel51.com/docs/fiftyone/api/fiftyone.core.collections.html?highlight=evaluate_detections#fiftyone.core.collections.SampleCollection.evaluate_detections) method of our dataset:
"""

# Computes the mAP of the predictions in the `predictions` field
# w.r.t. the ground truth labels in the `ground_truth` field
results = dataset.evaluate_detections(
    "predictions",
    gt_field="ground_truth",
    compute_mAP=True,
)

print("\nmAP: %.4f" % results.mAP())

"""Now let's evaluate only predictions with confidence greater than 0.75:"""

# Create a view that only contains predictions with confidence > 0.75
high_conf_view = dataset.filter_labels("predictions", F("confidence") > 0.75)

# Evaluate the predictions in the `predictions` field w.r.t. the ground truth
# labels in the `ground_truth` field
results = high_conf_view.evaluate_detections(
    "predictions",
    gt_field="ground_truth",
    eval_key="eval",
)

"""The `results` object that is returned provides handy methods for generating various performance reports for our model.

For example, let's print a classification report for the top-10 most common object classes:
"""

# Get the 10 most common classes in the dataset
counts = dataset.count_values("ground_truth.detections.label")
classes = sorted(counts, key=counts.get, reverse=True)[:10]

# Print a classification report for the top-10 classes
results.print_report(classes=classes)

"""Aggregate metrics alone don’t give the full picture of a model's performance. In practice, the limiting factor of a model is often data quality issues that you need to **see** to address. FiftyOne is designed to make it easy to do just that.

Note that the last [evaluate_detections()](https://voxel51.com/docs/fiftyone/api/fiftyone.core.collections.html?highlight=evaluate_detections#fiftyone.core.collections.SampleCollection.evaluate_detections) method that we ran populated new fields on our dataset that count the number of true positives, false positives, and false negative objects in every sample:
"""

print(dataset)

"""Let's use this information to visualize the samples with the most false positives in the App:"""

session.view = high_conf_view.sort_by("eval_fp", reverse=True)

"""You can see that the samples with the most number of false positives are crowded scenes, indicating that we should change our training scheme/dataset to better account for crowds of objects.

This is just a taste of the evaluation that can be done with FiftyOne. Check out our [tutorials](https://voxel51.com/docs/fiftyone/tutorials/index.html) and [blog posts](https://medium.com/voxel5) for more examples of debugging different kinds of models.

## Finding label mistakes

Another core use case of FiftyOne is to load and explore your dataset and annotations to get a feel for your data distribution and annotation quality.

In addition to self-guided analysis in the App, the [FiftyOne Brain](https://voxel51.com/docs/fiftyone/user_guide/brain.html#fiftyone-brain) provides methods that can help you gather insights about your dataset automatically:

- [Uniqueness](https://voxel51.com/docs/fiftyone/user_guide/brain.html#image-uniqueness) - A score comparing similarity in the content of images or image patches with all others in the dataset
- [Mistakenness](https://voxel51.com/docs/fiftyone/user_guide/brain.html#label-mistakes) - A score representing the liklihood of mistakenness for a given label
- [Hardness](https://voxel51.com/docs/fiftyone/user_guide/brain.html#sample-hardness) - A score representing how hard a sample is to train on allowing you to easily mine hard samples for your training set

Continuing with our `quickstart` dataset, let's compute the mistakenness of the annotations in the `ground_truth` field using the (high-confidence) model predictions in the `predictions` field of the dataset as a reference point:
"""

import fiftyone.brain as fob

# Computes the mistakenness of the labels in the `ground_truth` field,
# which scores the chance that the labels are incorrect, using the
# high confidence predictions in the `predictions` field as a reference
fob.compute_mistakenness(
    high_conf_view,
    "predictions",
    label_field="ground_truth",
    use_logits=False,
)

"""Let's print the dataset's schema to see what happened:"""

print(dataset)

"""A numeric `mistakenness` field was added to each sample on the dataset, which measures the (maximum) mistakenness of the annotations in the sample.

In addition, each detection in the `ground_truth` field has been assigned a `mistakenness` value that measures it's likelihood of being incorrect:
"""

# Ground truth detections now have a `mistakeness` value
sample = dataset.first()
print(sample.ground_truth.detections[0])

"""Let's view the annotations that were flagged as likely mistakes in the App to see if we should fix any of them:"""

session.view = high_conf_view.filter_labels("ground_truth", F("mistakenness") > 0.95)

"""The `mistakenness` scores are computed using the confidence of the model predictions you provide. The model used to generate the predictions used here was [this Faster-RCNN model](https://voxel51.com/docs/fiftyone/user_guide/model_zoo/models.html#faster-rcnn-resnet50-fpn-coco-torch), which is a few years old. However, trying [other models from the Model Zoo](https://voxel51.com/docs/fiftyone/user_guide/model_zoo/models.html) will result in more informative `mistakenness` scores!

## Sharing notebooks

To make a notebook ready for sharing, you'll need to screenshot the currently active App by calling [Session.freeze()](https://voxel51.com/docs/fiftyone/api/fiftyone.core.session.html#fiftyone.core.session.Session.freeze):
"""

session.freeze()

"""Now when you share this notebook, publish it online, etc., all of your App outputs will be available for readers to see when they first open the notebook.

## Further reading

This quickstart touched on only a few of the possibilities of using FiftyOne. If you'd like to learn more, check out these [tutorials](https://voxel51.com/docs/fiftyone/tutorials/index.html) and [recipes](https://voxel51.com/docs/fiftyone/recipes/index.html) to see more concrete use cases and best practices.

And did we mention that FiftyOne is open source? Check out the project [on GitHub](https://github.com/voxel51/fiftyone) and [leave an issue](https://github.com/voxel51/fiftyone/issues/new/choose) if you think something is missing.

Thanks for tuning in!
"""